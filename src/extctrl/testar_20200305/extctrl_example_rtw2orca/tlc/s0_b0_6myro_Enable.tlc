%implements s0_b0_6myro_Enable "C"

%function Enable(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%<SLibCG_TrackDW(0)>\
/* Enable for Sin: '<Root>/Sine Wave' */
extctrl_example_DW->systemEnable = 1;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Enable", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Enable"))
%<SLibCG_AccessArg(0, 3, 0)>
%endif
%if SLibCG_ArgAccessed(0, 3, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Enable", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Enable"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 3, 0)>
%endif
%endfunction
%function EnableFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Enable(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 3, 0)
%<comma>%<::tSimStructType> * const extctrl_example_rtM\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%endfunction
