%implements s0_b0_6myro_Update "C"

%function Update(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T HoldSine;
%closefile localVarDecl
%<SLibCG_TrackDW(0)>\
%<SLibCG_TrackBlockIO(0)>\
/* Update for Memory: '<S1>/Memory' */
extctrl_example_DW->Memory_PreviousInput = extctrl_example_B->Logic[0];
/* Update for Sin: '<Root>/Sine Wave' */
HoldSine = extctrl_example_DW->lastSin;
extctrl_example_DW->lastSin = extctrl_example_DW->lastSin * 0.99918725891521154 + extctrl_example_DW->lastCos * 0.04030907616785482;
extctrl_example_DW->lastCos = extctrl_example_DW->lastCos * 0.99918725891521154 - HoldSine * 0.04030907616785482;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Update", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Update"))
%<SLibCG_AccessArg(0, 2, 0)>
%endif
%if SLibCG_ArgAccessed(0, 2, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Update", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Update"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 2, 0)>
%endif
%<LibSetSystemField(system, "CachedUpdateLocalVars", localVarDecl)>
%endfunction
%function UpdateFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Update(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 2, 0)
%<comma>%<::tSimStructType> * const extctrl_example_rtM\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%endfunction
